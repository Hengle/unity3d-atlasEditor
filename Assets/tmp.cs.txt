#if UNITY_2_6
#endif
// Type: exAtlasEditor
// Assembly: ex2D.Editor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Assembly location: C:\Documents and Settings\Admin\Рабочий стол\ex2D.Editor.dll

using System;
using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEngine;

internal class exAtlasEditor : EditorWindow
{
  private static int[] sizeList = new int[8]
  {
    32,
    64,
    128,
    256,
    512,
    1024,
    2048,
    4096
  };
  private static string[] sizeTextList;
  private exAtlasInfo curEdit;
  private int selectIdx;
  private Rect atlasInfoRect;
  private Vector2 scrollPos;
  private List<exAtlasInfo.Element> selectedElements;
  private Rect selectRect;
  private Vector2 mouseDownPos;
  private Vector2 accDeltaMove;
  private bool inRectSelectState;
  private bool inDraggingElementState;
  private bool doImport;
  private List<Object> importObjects;
  private Object oldSelActiveObject;
  private List<Object> oldSelObjects;

  static exAtlasEditor()
  {
    string[] strArray = new string[8];
    int index1 = 0;
    string str1 = "32px";
    strArray[index1] = str1;
    int index2 = 1;
    string str2 = "64px";
    strArray[index2] = str2;
    int index3 = 2;
    string str3 = "128px";
    strArray[index3] = str3;
    int index4 = 3;
    string str4 = "256px";
    strArray[index4] = str4;
    int index5 = 4;
    string str5 = "512px";
    strArray[index5] = str5;
    int index6 = 5;
    string str6 = "1024px";
    strArray[index6] = str6;
    int index7 = 6;
    string str7 = "2048px";
    strArray[index7] = str7;
    int index8 = 7;
    string str8 = "4096px";
    strArray[index8] = str8;
    exAtlasEditor.sizeTextList = strArray;
  }

  public exAtlasEditor()
  {
    base.\u002Ector();
  }

  private void AtlasInfoField(Rect _rect, int _borderSize, exAtlasInfo _atlasInfo)
  {
    Texture2D texture2D = exEditorHelper.CheckerboardTexture();
    float num1 = (float) ((double) _atlasInfo.width * (double) _atlasInfo.scale + 2.0 * (double) _borderSize);
    float num2 = (float) ((double) _atlasInfo.height * (double) _atlasInfo.scale + 2.0 * (double) _borderSize);
    Rect _atlasRect;
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    ((Rect) @_atlasRect).\u002Ector(((Rect) @_rect).get_x(), ((Rect) @_rect).get_y(), num1, num2);
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    GUI.BeginGroup(new Rect(((Rect) @_rect).get_x(), ((Rect) @_rect).get_y(), (float) _atlasInfo.width * _atlasInfo.scale, (float) _atlasInfo.height * _atlasInfo.scale));
    Color color = GUI.get_color();
    GUI.set_color(new Color((float) _atlasInfo.bgColor.r, (float) _atlasInfo.bgColor.g, (float) _atlasInfo.bgColor.b, 1f));
    if (_atlasInfo.showCheckerboard)
    {
      int num3 = Mathf.CeilToInt((float) _atlasInfo.width * _atlasInfo.scale / (float) ((Texture) texture2D).get_width());
      int num4 = Mathf.CeilToInt((float) _atlasInfo.height * _atlasInfo.scale / (float) ((Texture) texture2D).get_height());
      for (int index1 = 0; index1 < num3; ++index1)
      {
        for (int index2 = 0; index2 < num4; ++index2)
        {
          Rect rect;
          // ISSUE: explicit reference operation
          ((Rect) @rect).\u002Ector((float) (index1 * ((Texture) texture2D).get_width()), (float) (index2 * ((Texture) texture2D).get_height()), (float) ((Texture) texture2D).get_width(), (float) ((Texture) texture2D).get_height());
          GUI.DrawTexture(rect, (Texture) texture2D);
        }
      }
    }
    else
      GUI.DrawTexture(new Rect(0.0f, 0.0f, (float) _atlasInfo.width * _atlasInfo.scale, (float) _atlasInfo.height * _atlasInfo.scale), (Texture) exEditorHelper.WhiteTexture());
    GUI.set_color(color);
    GUI.EndGroup();
    GUIContent guiContent = new GUIContent();
    if (_atlasInfo.elements.Count == 0)
    {
      guiContent.set_text("Drag Textures On It");
      guiContent.set_tooltip("Drag Textures to create atlas");
    }
    else
      guiContent.set_text(string.Empty);
    Color backgroundColor = GUI.get_backgroundColor();
    GUI.set_backgroundColor(Color.get_black());
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    GUI.Box(new Rect(((Rect) @_rect).get_x() - (float) _borderSize, ((Rect) @_rect).get_y() - (float) _borderSize, num1, num2), guiContent, exEditorHelper.RectBorderStyle());
    GUI.set_backgroundColor(backgroundColor);
    List<exAtlasInfo.Element> list = new List<exAtlasInfo.Element>();
    using (List<exAtlasInfo.Element>.Enumerator enumerator = _atlasInfo.elements.GetEnumerator())
    {
      while (enumerator.MoveNext())
      {
        exAtlasInfo.Element current = enumerator.Current;
        if (Object.op_Equality((Object) current.texture, (Object) null))
          list.Add(current);
        else if (current.isFontElement && (Object.op_Equality((Object) current.srcFontInfo, (Object) null) || Object.op_Equality((Object) current.destFontInfo, (Object) null)))
          list.Add(current);
        else
          this.AtlasElementField(_atlasRect, _atlasInfo, current);
      }
    }
    using (List<exAtlasInfo.Element>.Enumerator enumerator = list.GetEnumerator())
    {
      while (enumerator.MoveNext())
      {
        exAtlasInfo.Element current = enumerator.Current;
        _atlasInfo.RemoveElement(current);
      }
    }
    Event current1 = Event.get_current();
    // ISSUE: explicit reference operation
    if (((Rect) @_atlasRect).Contains(current1.get_mousePosition()))
    {
      if (current1.get_type() == 9)
      {
        foreach (Object _o in DragAndDrop.get_objectReferences())
        {
          if (_o is Texture2D || _o is exBitmapFont && (_o as exBitmapFont).inAtlas == null || exEditorHelper.IsDirectory(_o))
          {
            DragAndDrop.set_visualMode((DragAndDropVisualMode) 1);
            break;
          }
        }
      }
      else if (current1.get_type() == 10)
      {
        DragAndDrop.AcceptDrag();
        this.oldSelActiveObject = (Object) null;
        this.oldSelObjects.Clear();
        foreach (Object @object in Selection.get_objects())
          this.oldSelObjects.Add(@object);
        this.oldSelActiveObject = Selection.get_activeObject();
        foreach (Object _o in DragAndDrop.get_objectReferences())
        {
          if (exEditorHelper.IsDirectory(_o))
          {
            Selection.set_activeObject(_o);
            this.importObjects.AddRange((IEnumerable<Object>) Selection.GetFiltered(typeof (Texture2D), (SelectionMode) 32));
            this.importObjects.AddRange((IEnumerable<Object>) Selection.GetFiltered(typeof (exBitmapFont), (SelectionMode) 32));
          }
          else if (_o is Texture2D || _o is exBitmapFont)
            this.importObjects.Add(_o);
        }
        Selection.set_activeObject((Object) null);
        this.doImport = true;
        this.Repaint();
      }
    }
    GUILayoutUtility.GetRect(num1, num2);
  }

  private void AtlasElementField(Rect _atlasRect, exAtlasInfo _atlasInfo, exAtlasInfo.Element _el)
  {
    Color backgroundColor = GUI.get_backgroundColor();
    Rect rect1;
    // ISSUE: explicit reference operation
    ((Rect) @rect1).\u002Ector((float) _el.coord[0] * _atlasInfo.scale, (float) _el.coord[1] * _atlasInfo.scale, (float) _el.Width() * _atlasInfo.scale, (float) _el.Height() * _atlasInfo.scale);
    bool flag = this.selectedElements.IndexOf(_el) != -1;
    GUI.BeginGroup(_atlasRect);
    GUI.set_color(_el.atlasInfo.elementBgColor);
    GUI.DrawTexture(rect1, (Texture) exEditorHelper.WhiteTexture());
    GUI.set_color(backgroundColor);
    GUI.EndGroup();
    Matrix4x4 matrix = GUI.get_matrix();
    Rect rect2;
    if (_el.rotated)
    {
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      GUIUtility.RotateAroundPivot(90f, new Vector2(((Rect) @_atlasRect).get_x(), ((Rect) @_atlasRect).get_y()));
      // ISSUE: explicit reference operation
      GUI.set_matrix(Matrix4x4.op_Multiply(GUI.get_matrix(), Matrix4x4.TRS(new Vector3(0.0f, -((Rect) @_atlasRect).get_width(), 0.0f), Quaternion.get_identity(), Vector3.get_one())));
      GUI.BeginGroup(_atlasRect);
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      ((Rect) @rect2).\u002Ector((float) _el.coord[1], ((Rect) @_atlasRect).get_width() - (float) _el.coord[0] - ((Rect) @_el.trimRect).get_height(), ((Rect) @_el.trimRect).get_width(), ((Rect) @_el.trimRect).get_height());
    }
    else
    {
      GUI.BeginGroup(_atlasRect);
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      ((Rect) @rect2).\u002Ector((float) _el.coord[0], (float) _el.coord[1], ((Rect) @_el.trimRect).get_width(), ((Rect) @_el.trimRect).get_height());
    }
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    ((Rect) @rect2).\u002Ector(((Rect) @rect2).get_x() * _atlasInfo.scale, ((Rect) @rect2).get_y() * _atlasInfo.scale, ((Rect) @rect2).get_width() * _atlasInfo.scale, ((Rect) @rect2).get_height() * _atlasInfo.scale);
    if (_el.trim)
    {
      Rect rect3;
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      ((Rect) @rect3).\u002Ector(-((Rect) @_el.trimRect).get_x() * _atlasInfo.scale, -((Rect) @_el.trimRect).get_y() * _atlasInfo.scale, (float) ((Texture) _el.texture).get_width() * _atlasInfo.scale, (float) ((Texture) _el.texture).get_height() * _atlasInfo.scale);
      GUI.BeginGroup(rect2);
      GUI.DrawTexture(rect3, (Texture) _el.texture);
      GUI.EndGroup();
    }
    else
      GUI.DrawTexture(rect2, (Texture) _el.texture);
    if (_el.rotated)
      GUI.set_matrix(matrix);
    GUI.EndGroup();
    GUI.BeginGroup(_atlasRect);
    if (flag)
    {
      GUI.set_backgroundColor(_el.atlasInfo.elementSelectColor);
      GUI.Box(rect1, (GUIContent) GUIContent.none, exEditorHelper.RectBorderStyle());
      GUI.set_backgroundColor(backgroundColor);
    }
    GUI.EndGroup();
    Event current = Event.get_current();
    GUI.BeginGroup(_atlasRect);
    // ISSUE: explicit reference operation
    if (current.get_type() == null && current.get_button() == 0 && (current.get_clickCount() == 1 && ((Rect) @rect1).Contains(current.get_mousePosition())))
    {
      GUIUtility.set_keyboardControl(-1);
      if (current.get_command() || current.get_control())
      {
        this.ToggleSelected(_el);
      }
      else
      {
        this.inDraggingElementState = true;
        if (!flag && !current.get_command() && !current.get_control())
        {
          this.selectedElements.Clear();
          this.AddSelected(_el);
        }
      }
      current.Use();
      this.Repaint();
    }
    GUI.EndGroup();
  }

  [MenuItem("Window/ex2D/Atlas Editor")]
  public static exAtlasEditor NewWindow()
  {
    return (exAtlasEditor) EditorWindow.GetWindow<exAtlasEditor>();
  }

  private void OnEnable()
  {
    ((Object) this).set_name("Atlas Editor");
    this.set_wantsMouseMove(true);
    this.set_autoRepaintOnSceneChange(false);
  }

  private void Init()
  {
    this.selectedElements.Clear();
    this.inRectSelectState = false;
    this.inDraggingElementState = false;
    this.accDeltaMove = Vector2.get_zero();
    this.doImport = false;
    this.importObjects.Clear();
    this.oldSelActiveObject = (Object) null;
    this.oldSelObjects.Clear();
  }

  public void Edit(Object _obj)
  {
    if (!Object.op_Inequality((Object) this.curEdit, _obj))
      return;
    Object @object = _obj;
    if (@object is exAtlas || @object is Texture2D || @object is Material)
    {
      string assetPath = AssetDatabase.GetAssetPath(@object);
      @object = AssetDatabase.LoadAssetAtPath(Path.Combine(Path.GetDirectoryName(assetPath), Path.GetFileNameWithoutExtension(assetPath) + " - EditorInfo.asset"), typeof (exAtlasInfo));
      if (Object.op_Equality(@object, (Object) null))
        @object = _obj;
    }
    if (!(@object is exAtlasInfo) || !Object.op_Inequality(@object, (Object) this.curEdit))
      return;
    this.curEdit = @object as exAtlasInfo;
    this.Init();
    this.Repaint();
  }

  private void OnSelectionChange()
  {
    this.Edit(Selection.get_activeObject());
    if (Object.op_Inequality((Object) this.curEdit, (Object) null))
    {
      this.selectedElements.Clear();
      foreach (Object @object in Selection.get_objects())
      {
        if (@object is Texture2D)
        {
          using (List<exAtlasInfo.Element>.Enumerator enumerator = this.curEdit.elements.GetEnumerator())
          {
            while (enumerator.MoveNext())
            {
              exAtlasInfo.Element current = enumerator.Current;
              if (Object.op_Equality((Object) current.texture, @object))
              {
                this.AddSelected(current);
                break;
              }
            }
          }
        }
      }
    }
    this.Repaint();
  }

  private void OnGUI()
  {
    EditorGUI.set_indentLevel(0);
    if (Object.op_Equality((Object) this.curEdit, (Object) null))
    {
      GUILayout.Space(10f);
      GUILayout.Label("Please select an Atlas Info", new GUILayoutOption[0]);
    }
    else
    {
      GUILayout.BeginHorizontal(EditorStyles.get_toolbar(), new GUILayoutOption[0]);
	      GUILayout.FlexibleSpace();
	      GUI.set_enabled(this.selectedElements.Count != 0);
	      if (GUILayout.Button("Select In Project...", EditorStyles.get_toolbarButton(), new GUILayoutOption[0]))
	      {
	        List<Object> list = new List<Object>(this.curEdit.elements.Count);
	        using (List<exAtlasInfo.Element>.Enumerator enumerator = this.selectedElements.GetEnumerator())
	        {
	          while (enumerator.MoveNext())
	          {
	            exAtlasInfo.Element current = enumerator.Current;
	            if (list.IndexOf((Object) current.texture) == -1)
	              list.Add((Object) current.texture);
	          }
	        }
	        if (list.Count != 0)
	        {
	          this.selectIdx = (this.selectIdx + 1) % list.Count;
	          Selection.set_objects(list.ToArray());
	          EditorGUIUtility.PingObject(Selection.get_objects()[this.selectIdx]);
	        }
	      }
	      GUI.set_enabled(true);
	      GUILayout.Space(5f);
	      GUILayout.Label("Zoom", new GUILayoutOption[0]);
	      GUILayout.Space(5f);
	      exAtlasInfo exAtlasInfo1 = this.curEdit;
	      double num1 = (double) this.curEdit.scale;
	      double num2 = 0.100000001490116;
	      double num3 = 2.0;
	      GUILayoutOption[] guiLayoutOptionArray1 = new GUILayoutOption[1];
	      int index1 = 0;
	      GUILayoutOption guiLayoutOption1 = GUILayout.MaxWidth(150f);
	      guiLayoutOptionArray1[index1] = guiLayoutOption1;
	      double num4 = (double) GUILayout.HorizontalSlider((float) num1, (float) num2, (float) num3, guiLayoutOptionArray1);
	      exAtlasInfo1.scale = (float) num4;
	      GUILayout.Space(5f);
	      exAtlasInfo exAtlasInfo2 = this.curEdit;
	      double num5 = (double) this.curEdit.scale;
	      GUIStyle toolbarTextField = EditorStyles.get_toolbarTextField();
	      GUILayoutOption[] guiLayoutOptionArray2 = new GUILayoutOption[1];
	      int index2 = 0;
	      GUILayoutOption guiLayoutOption2 = GUILayout.Width(50f);
	      guiLayoutOptionArray2[index2] = guiLayoutOption2;
	      double num6 = (double) EditorGUILayout.FloatField((float) num5, toolbarTextField, guiLayoutOptionArray2);
	      exAtlasInfo2.scale = (float) num6;
	      this.curEdit.scale = Mathf.Clamp(this.curEdit.scale, 0.1f, 2f);
	      GUI.set_enabled(this.curEdit.needRebuild);
	      string str1 = "Build";
	      GUIStyle toolbarButton = EditorStyles.get_toolbarButton();
	      GUILayoutOption[] guiLayoutOptionArray3 = new GUILayoutOption[1];
	      int index3 = 0;
	      GUILayoutOption guiLayoutOption3 = GUILayout.Width(80f);
	      guiLayoutOptionArray3[index3] = guiLayoutOption3;
	      if (GUILayout.Button(str1, toolbarButton, guiLayoutOptionArray3))
	      {
	        exAtlasInfoUtility.Build(this.curEdit, false);
	        exAtlasInfoUtility.BuildSpAnimClipsFromRebuildList(this.curEdit);
	        exSceneHelper.UpdateSprites(new List<string>()
	        {
	          exEditorHelper.AssetToGUID((Object) this.curEdit)
	        });
	        EditorUtility.UnloadUnusedAssets();
	      }
	      GUI.set_enabled(true);
	      if (GUILayout.Button((Texture) exEditorHelper.HelpTexture(), EditorStyles.get_toolbarButton(), new GUILayoutOption[0]))
	        Help.BrowseURL("http://www.ex-dev.com/ex2d/wiki/doku.php?id=manual:atlas_editor");
      GUILayout.EndHorizontal();
      float num7 = EditorStyles.get_toolbar().CalcHeight(new GUIContent(string.Empty), 0.0f);
      exAtlasEditor exAtlasEditor = this;
      Vector2 vector2_1 = this.scrollPos;
      GUILayoutOption[] guiLayoutOptionArray4 = new GUILayoutOption[2];
      int index4 = 0;
      Rect position1 = this.get_position();
      // ISSUE: explicit reference operation
      GUILayoutOption guiLayoutOption4 = GUILayout.Width(((Rect) @position1).get_width());
      guiLayoutOptionArray4[index4] = guiLayoutOption4;
      int index5 = 1;
      Rect position2 = this.get_position();
      // ISSUE: explicit reference operation
      GUILayoutOption guiLayoutOption5 = GUILayout.Height(((Rect) @position2).get_height() - num7);
      guiLayoutOptionArray4[index5] = guiLayoutOption5;
      Vector2 vector2_2 = EditorGUILayout.BeginScrollView(vector2_1, guiLayoutOptionArray4);
      exAtlasEditor.scrollPos = vector2_2;
      Rect lastRect1;
      // ISSUE: explicit reference operation
      ((Rect) @lastRect1).\u002Ector(10f, 0.0f, 1f, 1f);
      GUILayout.Space(5f);
      string str2 = "Atlas Info";
      exAtlasInfo exAtlasInfo3 = this.curEdit;
      Type type1 = typeof (exAtlasInfo);
      int num8 = 0;
      GUILayoutOption[] guiLayoutOptionArray5 = new GUILayoutOption[1];
      int index6 = 0;
      GUILayoutOption guiLayoutOption6 = GUILayout.Width(300f);
      guiLayoutOptionArray5[index6] = guiLayoutOption6;
      Object @object = EditorGUILayout.ObjectField(str2, (Object) exAtlasInfo3, type1, num8 != 0, guiLayoutOptionArray5);
      if (Object.op_Inequality(@object, (Object) this.curEdit))
        Selection.set_activeObject(@object);
      GUILayout.BeginHorizontal(new GUILayoutOption[0]);
      GUILayoutOption[] guiLayoutOptionArray6 = new GUILayoutOption[1];
      int index7 = 0;
      GUILayoutOption guiLayoutOption7 = GUILayout.MaxWidth(200f);
      guiLayoutOptionArray6[index7] = guiLayoutOption7;
      GUILayout.BeginVertical(guiLayoutOptionArray6);
      this.curEdit.foldCanvas = EditorGUILayout.Foldout(this.curEdit.foldCanvas, "Canvas");
      if (this.curEdit.foldCanvas)
      {
        GUILayout.BeginHorizontal(new GUILayoutOption[0]);
        GUILayout.Space(20f);
        GUILayout.BeginVertical(new GUILayoutOption[0]);
        int _width = this.curEdit.width;
        int _height = this.curEdit.height;
        this.WidthAndHeightField(ref _width, ref _height);
        if (_width != this.curEdit.width || _height != this.curEdit.height)
        {
          this.curEdit.width = _width;
          this.curEdit.height = _height;
          if (Object.op_Implicit((Object) this.curEdit.texture))
          {
            string assetPath = AssetDatabase.GetAssetPath((Object) this.curEdit.texture);
            exTextureHelper.SetReadable(this.curEdit.texture, true);
            this.curEdit.texture.Resize(_width, _height);
            this.curEdit.ClearAtlasTexture();
            Texture2D texture2D = new Texture2D(_width, _height, (TextureFormat) 5, false);
            for (int index8 = 0; index8 < _width; ++index8)
            {
              for (int index9 = 0; index9 < _height; ++index9)
                texture2D.SetPixel(index8, index9, new Color(1f, 1f, 1f, 0.0f));
            }
            texture2D.Apply(false);
            byte[] bytes = texture2D.EncodeToPNG();
            if (bytes != null)
              File.WriteAllBytes(assetPath, bytes);
            Object.DestroyImmediate((Object) texture2D);
            TextureImporter textureImporter = AssetImporter.GetAtPath(assetPath) as TextureImporter;
            textureImporter.set_maxTextureSize(Mathf.Max(_width, _height));
            textureImporter.set_isReadable(false);
            AssetDatabase.ImportAsset(assetPath);
          }
          this.curEdit.needRebuild = true;
        }
        this.curEdit.bgColor = EditorGUILayout.ColorField("Bg Color", this.curEdit.bgColor, new GUILayoutOption[0]);
        this.curEdit.showCheckerboard = EditorGUILayout.Toggle("Show Checkerboard", this.curEdit.showCheckerboard, new GUILayoutOption[0]);
        GUILayout.EndVertical();
        GUILayout.EndHorizontal();
      }
      GUILayout.Space(20f);
      this.curEdit.foldLayout = EditorGUILayout.Foldout(this.curEdit.foldLayout, "Layout");
      if (this.curEdit.foldLayout)
      {
        GUILayout.BeginHorizontal(new GUILayoutOption[0]);
        GUILayout.Space(20f);
        GUILayout.BeginVertical(new GUILayoutOption[0]);
        this.curEdit.algorithm = (exAtlasInfo.Algorithm) EditorGUILayout.EnumPopup("Algorithm", (Enum) this.curEdit.algorithm, new GUILayoutOption[0]);
        this.curEdit.sortBy = (exAtlasInfo.SortBy) EditorGUILayout.EnumPopup("Sort By", (Enum) this.curEdit.sortBy, new GUILayoutOption[0]);
        this.curEdit.sortOrder = (exAtlasInfo.SortOrder) EditorGUILayout.EnumPopup("Sort Order", (Enum) this.curEdit.sortOrder, new GUILayoutOption[0]);
        this.curEdit.padding = EditorGUILayout.IntField("Padding", this.curEdit.padding, new GUILayoutOption[0]);
        GUI.set_enabled(false);
        this.curEdit.allowRotate = false;
        this.curEdit.allowRotate = EditorGUILayout.Toggle("Allow Rotate", this.curEdit.allowRotate, new GUILayoutOption[0]);
        GUI.set_enabled(true);
        if (GUILayout.Button("Apply", new GUILayoutOption[0]))
        {
          try
          {
            EditorUtility.DisplayProgressBar("Layout Elements...", "Layout Elements...", 0.5f);
            Undo.RegisterUndo((Object) this.curEdit, "Apply.LayoutElements");
            this.curEdit.LayoutElements();
            EditorUtility.ClearProgressBar();
          }
          catch (Exception ex)
          {
            EditorUtility.ClearProgressBar();
            throw;
          }
        }
        GUILayout.EndVertical();
        GUILayout.EndHorizontal();
      }
      GUILayout.Space(20f);
      this.curEdit.foldElement = EditorGUILayout.Foldout(this.curEdit.foldElement, "Element");
      if (this.curEdit.foldElement)
      {
        GUILayout.BeginHorizontal(new GUILayoutOption[0]);
        GUILayout.Space(20f);
        GUILayout.BeginVertical(new GUILayoutOption[0]);
        this.curEdit.elementBgColor = EditorGUILayout.ColorField("Bg Color", this.curEdit.elementBgColor, new GUILayoutOption[0]);
        this.curEdit.elementSelectColor = EditorGUILayout.ColorField("Select Color", this.curEdit.elementSelectColor, new GUILayoutOption[0]);
        GUILayout.EndVertical();
        GUILayout.EndHorizontal();
      }
      GUILayout.Space(40f);
      GUILayout.BeginHorizontal(new GUILayoutOption[0]);
      GUILayout.Space(10f);
      GUILayout.BeginVertical(new GUILayoutOption[0]);
      GUI.set_enabled(false);
      string directoryName = Path.GetDirectoryName(AssetDatabase.GetAssetPath((Object) this.curEdit));
      if (Object.op_Implicit((Object) this.curEdit.texture))
      {
        exAtlasInfo exAtlasInfo4 = this.curEdit;
        string str3 = "Texture";
        Texture2D texture2D1 = this.curEdit.texture;
        Type type2 = typeof (Texture2D);
        int num9 = 0;
        GUILayoutOption[] guiLayoutOptionArray7 = new GUILayoutOption[2];
        int index8 = 0;
        GUILayoutOption guiLayoutOption8 = GUILayout.Width(100f);
        guiLayoutOptionArray7[index8] = guiLayoutOption8;
        int index9 = 1;
        GUILayoutOption guiLayoutOption9 = GUILayout.Height(100f);
        guiLayoutOptionArray7[index9] = guiLayoutOption9;
        Texture2D texture2D2 = (Texture2D) EditorGUILayout.ObjectField(str3, (Object) texture2D1, type2, num9 != 0, guiLayoutOptionArray7);
        exAtlasInfo4.texture = texture2D2;
      }
      else
      {
        GUI.set_enabled(true);
        if (GUILayout.Button("Create Texture...", new GUILayoutOption[0]))
        {
          Texture2D texture2D = new Texture2D(this.curEdit.width, this.curEdit.height, (TextureFormat) 5, false);
          for (int index8 = 0; index8 < this.curEdit.width; ++index8)
          {
            for (int index9 = 0; index9 < this.curEdit.height; ++index9)
              texture2D.SetPixel(index8, index9, new Color(1f, 1f, 1f, 0.0f));
          }
          texture2D.Apply(false);
          string path = Path.Combine(directoryName, this.curEdit.atlasName + ".png");
          byte[] bytes = texture2D.EncodeToPNG();
          if (bytes != null)
            File.WriteAllBytes(path, bytes);
          Object.DestroyImmediate((Object) texture2D);
          AssetDatabase.ImportAsset(path);
          TextureImporter textureImporter = AssetImporter.GetAtPath(path) as TextureImporter;
          textureImporter.set_maxTextureSize(Mathf.Max(this.curEdit.width, this.curEdit.height));
          textureImporter.set_textureFormat((TextureImporterFormat) -3);
          textureImporter.set_isReadable(true);
          textureImporter.set_mipmapEnabled(false);
          textureImporter.set_textureType((TextureImporterType) 5);
          textureImporter.set_npotScale((TextureImporterNPOTScale) 0);
          AssetDatabase.ImportAsset(path);
          this.curEdit.texture = (Texture2D) AssetDatabase.LoadAssetAtPath(path, typeof (Texture2D));
          if (Object.op_Implicit((Object) this.curEdit.material))
            this.curEdit.material.set_mainTexture((Texture) this.curEdit.texture);
          EditorUtility.SetDirty((Object) this.curEdit);
        }
        GUI.set_enabled(false);
      }
      if (Object.op_Implicit((Object) this.curEdit.material))
      {
        this.curEdit.material = (Material) EditorGUILayout.ObjectField("Material", (Object) this.curEdit.material, typeof (Material), false, new GUILayoutOption[0]);
      }
      else
      {
        GUI.set_enabled(true);
        if (GUILayout.Button("Create Material...", new GUILayoutOption[0]))
        {
          Material material = new Material(Shader.Find("ex2D/Alpha Blended"));
          AssetDatabase.CreateAsset((Object) material, Path.Combine(directoryName, this.curEdit.atlasName + ".mat"));
          this.curEdit.material = material;
          this.curEdit.material.set_mainTexture((Texture) this.curEdit.texture);
          EditorUtility.SetDirty((Object) this.curEdit);
        }
        GUI.set_enabled(false);
      }
      if (Object.op_Implicit((Object) this.curEdit.atlas))
      {
        this.curEdit.atlas = (exAtlas) EditorGUILayout.ObjectField("Atlas", (Object) this.curEdit.atlas, typeof (exAtlas), false, new GUILayoutOption[0]);
      }
      else
      {
        GUI.set_enabled(true);
        if (GUILayout.Button("Create Atlas...", new GUILayoutOption[0]))
        {
          this.curEdit.atlas = exAtlasInfoUtility.CreateAtlas(directoryName, this.curEdit.atlasName);
          EditorUtility.SetDirty((Object) this.curEdit);
        }
        GUI.set_enabled(false);
      }
      GUI.set_enabled(true);
      GUILayout.BeginHorizontal(new GUILayoutOption[0]);
      bool flag = GUILayout.Toggle(this.curEdit.useBuildColor, "Use Build Color", new GUILayoutOption[0]);
      if (flag != this.curEdit.useBuildColor)
      {
        this.curEdit.useBuildColor = flag;
        this.curEdit.needRebuild = true;
        GUI.set_changed(true);
      }
      GUI.set_enabled(this.curEdit.useBuildColor);
      Color color = EditorGUILayout.ColorField(this.curEdit.buildColor, new GUILayoutOption[0]);
      if (Color.op_Inequality(color, this.curEdit.buildColor))
      {
        this.curEdit.buildColor = color;
        this.curEdit.needRebuild = true;
        GUI.set_changed(true);
      }
      GUI.set_enabled(true);
      GUILayout.EndHorizontal();
      GUILayout.Space(20f);
      GUILayout.Label("Atlas Fonts", new GUILayoutOption[0]);
      for (int index8 = 0; index8 < this.curEdit.bitmapFonts.Count; ++index8)
      {
        GUILayout.BeginHorizontal(new GUILayoutOption[0]);
        exBitmapFont _fontInfo = this.curEdit.bitmapFonts[index8];
        EditorGUILayout.ObjectField((Object) _fontInfo, typeof (exBitmapFont), false, new GUILayoutOption[0]);
        string str3 = "Delete";
        GUILayoutOption[] guiLayoutOptionArray7 = new GUILayoutOption[1];
        int index9 = 0;
        GUILayoutOption guiLayoutOption8 = GUILayout.MaxWidth(80f);
        guiLayoutOptionArray7[index9] = guiLayoutOption8;
        if (GUILayout.Button(str3, guiLayoutOptionArray7))
        {
          this.curEdit.RemoveBitmapFont(_fontInfo);
          AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath((Object) _fontInfo));
          --index8;
        }
        GUILayout.EndHorizontal();
      }
      GUILayout.EndVertical();
      GUILayout.EndHorizontal();
      GUILayout.EndVertical();
      GUILayout.Space(40f);
      lastRect1 = GUILayoutUtility.GetLastRect();
      GUILayout.BeginVertical(new GUILayoutOption[0]);
      GUILayout.Space(10f);
      Rect lastRect2 = GUILayoutUtility.GetLastRect();
      int _borderSize = 1;
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      this.atlasInfoRect = new Rect(((Rect) @lastRect2).get_xMax() + (float) _borderSize, ((Rect) @lastRect2).get_yMax() + (float) _borderSize, (float) this.curEdit.width * this.curEdit.scale, (float) this.curEdit.height * this.curEdit.scale);
      this.AtlasInfoField(this.atlasInfoRect, _borderSize, this.curEdit);
      GUILayout.EndVertical();
      GUILayout.EndHorizontal();
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      if (this.inRectSelectState && ((double) ((Rect) @this.selectRect).get_width() != 0.0 || (double) ((Rect) @this.selectRect).get_height() != 0.0))
        exEditorHelper.DrawRect(this.selectRect, new Color(0.0f, 0.5f, 1f, 0.2f), new Color(0.0f, 0.5f, 1f, 1f));
      Event current1 = Event.get_current();
      if (current1.get_type() == null && current1.get_button() == 0 && current1.get_clickCount() == 1)
      {
        GUIUtility.set_keyboardControl(-1);
        this.mouseDownPos = current1.get_mousePosition();
        this.inRectSelectState = true;
        this.UpdateSelectRect();
        this.ConfirmRectSelection();
        this.Repaint();
        current1.Use();
      }
      if (this.inRectSelectState)
      {
        if (current1.get_type() == 3)
        {
          this.UpdateSelectRect();
          this.ConfirmRectSelection();
          this.Repaint();
          current1.Use();
        }
        else if (current1.get_type() == 1 && current1.get_button() == 0)
        {
          this.inRectSelectState = false;
          this.ConfirmRectSelection();
          this.Repaint();
          current1.Use();
        }
      }
      if (this.inDraggingElementState)
      {
        if (current1.get_type() == 3)
        {
          this.MoveSelections(Vector2.op_Division(current1.get_delta(), this.curEdit.scale));
          this.Repaint();
          current1.Use();
        }
        else if (current1.get_type() == 1 && current1.get_button() == 0)
        {
          if (this.curEdit.needUpdateAnimClips)
          {
            using (List<exAtlasInfo.Element>.Enumerator enumerator = this.selectedElements.GetEnumerator())
            {
              while (enumerator.MoveNext())
                this.curEdit.AddSpriteAnimClipForRebuilding(enumerator.Current);
            }
            this.curEdit.needUpdateAnimClips = false;
          }
          this.inDraggingElementState = false;
          this.accDeltaMove = Vector2.get_zero();
          current1.Use();
        }
      }
      if (current1.get_isKey() && current1.get_type() == 4 && (current1.get_keyCode() == 8 || current1.get_keyCode() == (int) sbyte.MaxValue))
      {
        this.RemoveSelectedElements();
        this.Repaint();
        current1.Use();
      }
      EditorGUILayout.EndScrollView();
      if (this.doImport)
      {
        this.doImport = false;
        this.ImportObjects();
        Selection.set_activeObject(this.oldSelActiveObject);
        Selection.set_objects(this.oldSelObjects.ToArray());
        this.oldSelObjects.Clear();
        this.oldSelActiveObject = (Object) null;
        this.Repaint();
      }
      if (!GUI.get_changed())
        return;
      EditorUtility.SetDirty((Object) this.curEdit);
    }
  }

  private void ImportObjects()
  {
    try
    {
      EditorUtility.DisplayProgressBar("Adding Textures...", "Start adding ", 0.2f);
      this.curEdit.ImportObjects(this.importObjects.ToArray());
      this.importObjects.Clear();
      EditorUtility.ClearProgressBar();
    }
    catch (Exception ex)
    {
      EditorUtility.ClearProgressBar();
      throw;
    }
  }

  private void WidthAndHeightField(ref int _width, ref int _height)
  {
    _width = EditorGUILayout.IntPopup("Width", _width, exAtlasEditor.sizeTextList, exAtlasEditor.sizeList, new GUILayoutOption[0]);
    _height = EditorGUILayout.IntPopup("Height", _height, exAtlasEditor.sizeTextList, exAtlasEditor.sizeList, new GUILayoutOption[0]);
  }

  private void AddSelected(exAtlasInfo.Element _el)
  {
    if (this.selectedElements.IndexOf(_el) != -1)
      return;
    this.selectedElements.Add(_el);
  }

  private void ToggleSelected(exAtlasInfo.Element _el)
  {
    int index = this.selectedElements.IndexOf(_el);
    if (index != -1)
      this.selectedElements.RemoveAt(index);
    else
      this.selectedElements.Add(_el);
  }

  private void UpdateSelectRect()
  {
    Vector2 mousePosition = Event.get_current().get_mousePosition();
    float num1;
    float num2;
    if (this.mouseDownPos.x < mousePosition.x)
    {
      num1 = (float) this.mouseDownPos.x;
      num2 = (float) (mousePosition.x - this.mouseDownPos.x);
    }
    else
    {
      num1 = (float) mousePosition.x;
      num2 = (float) (this.mouseDownPos.x - mousePosition.x);
    }
    float num3;
    float num4;
    if (this.mouseDownPos.y < mousePosition.y)
    {
      num3 = (float) this.mouseDownPos.y;
      num4 = (float) (mousePosition.y - this.mouseDownPos.y);
    }
    else
    {
      num3 = (float) mousePosition.y;
      num4 = (float) (this.mouseDownPos.y - mousePosition.y);
    }
    this.selectRect = new Rect(num1, num3, num2, num4);
  }

  private void ConfirmRectSelection()
  {
    this.selectedElements.Clear();
    Rect rect1 = this.MapToAtalsInfoField(this.selectRect);
    using (List<exAtlasInfo.Element>.Enumerator enumerator = this.curEdit.elements.GetEnumerator())
    {
      while (enumerator.MoveNext())
      {
        exAtlasInfo.Element current = enumerator.Current;
        Rect rect2;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ((Rect) @rect2).\u002Ector((float) current.coord[0] * this.curEdit.scale, (float) current.coord[1] * this.curEdit.scale, ((Rect) @current.trimRect).get_width() * this.curEdit.scale, ((Rect) @current.trimRect).get_height() * this.curEdit.scale);
        if (exContains2D.RectRect(rect1, rect2) != 0 || exIntersection2D.RectRect(rect1, rect2))
          this.selectedElements.Add(current);
      }
    }
  }

  private void MoveSelections(Vector2 _delta)
  {
    int num1 = 0;
    int num2 = 0;
    this.curEdit.needUpdateAnimClips = true;
    this.curEdit.needRebuild = true;
    Undo.RegisterUndo((Object) this.curEdit, "MoveSelections");
    exAtlasEditor exAtlasEditor1 = this;
    Vector2 vector2_1 = Vector2.op_Addition(exAtlasEditor1.accDeltaMove, _delta);
    exAtlasEditor1.accDeltaMove = vector2_1;
    if (this.accDeltaMove.x > 1.0)
      num1 = Mathf.FloorToInt((float) this.accDeltaMove.x);
    else if (this.accDeltaMove.x < -1.0)
      num1 = Mathf.CeilToInt((float) this.accDeltaMove.x);
    if (this.accDeltaMove.y > 1.0)
      num2 = Mathf.FloorToInt((float) this.accDeltaMove.y);
    else if (this.accDeltaMove.y < -1.0)
      num2 = Mathf.CeilToInt((float) this.accDeltaMove.y);
    exAtlasEditor exAtlasEditor2 = this;
    Vector2 vector2_2 = Vector2.op_Subtraction(exAtlasEditor2.accDeltaMove, new Vector2((float) num1, (float) num2));
    exAtlasEditor2.accDeltaMove = vector2_2;
    using (List<exAtlasInfo.Element>.Enumerator enumerator = this.selectedElements.GetEnumerator())
    {
      while (enumerator.MoveNext())
      {
        exAtlasInfo.Element current = enumerator.Current;
        current.coord[0] += num1;
        current.coord[1] += num2;
      }
    }
    EditorUtility.SetDirty((Object) this.curEdit);
  }

  private void RemoveSelectedElements()
  {
    using (List<exAtlasInfo.Element>.Enumerator enumerator = this.selectedElements.GetEnumerator())
    {
      while (enumerator.MoveNext())
        this.curEdit.RemoveElement(enumerator.Current);
    }
  }

  private Rect MapToAtalsInfoField(Rect _rect)
  {
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    // ISSUE: explicit reference operation
    return new Rect(((Rect) @_rect).get_x() - ((Rect) @this.atlasInfoRect).get_x(), ((Rect) @_rect).get_y() - ((Rect) @this.atlasInfoRect).get_y(), ((Rect) @_rect).get_width(), ((Rect) @_rect).get_height());
  }
}
